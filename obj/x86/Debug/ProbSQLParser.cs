//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Study Folder\CHBK\Cao Hoc\Master Thesis\Phan Mem\PRDB Visual Management\ProbSQLCompiler\ProbSQL.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PRDB_Visual_Management.ProbSQLCompiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class ProbSQLParser : Parser {
	public const int
		EQ=1, NOT_EQ=2, GTH=3, GET=4, LTH=5, LET=6, LTH_IN=7, LTH_IG=8, LTH_PC=9, 
		LTH_ME=10, LET_IN=11, LET_IG=12, LET_PC=13, LET_ME=14, GTH_IN=15, GTH_IG=16, 
		GTH_PC=17, GTH_ME=18, GET_IN=19, GET_IG=20, GET_PC=21, GET_ME=22, OR_SYM=23, 
		AND_SYM=24, NOT_SYM=25, EQUAL_IN=26, EQUAL_IG=27, EQUAL_PC=28, EQUAL_ME=29, 
		UNEQUAL_IN=30, UNEQUAL_IG=31, UNEQUAL_PC=32, UNEQUAL_ME=33, CONJ_IN=34, 
		CONJ_IG=35, CONJ_PC=36, CONJ_ME=37, DISJ_IN=38, DISJ_IG=39, DISJ_PC=40, 
		DISJ_ME=41, DIFF_IN=42, DIFF_IG=43, DIFF_PC=44, DIFF_ME=45, JOIN_IN=46, 
		JOIN_IG=47, JOIN_PC=48, JOIN_ME=49, UNION_IN=50, UNION_IG=51, UNION_PC=52, 
		UNION_ME=53, INTERSECT_IN=54, INTERSECT_IG=55, INTERSECT_PC=56, INTERSECT_ME=57, 
		MINUS_IN=58, MINUS_IG=59, MINUS_PC=60, MINUS_ME=61, IN_IN=62, IN_IG=63, 
		IN_PC=64, IN_ME=65, NOT_IN_IN=66, NOT_IN_IG=67, NOT_IN_PC=68, NOT_IN_ME=69, 
		PLUS=70, MINUS=71, DOT=72, COMMA=73, ASTERISK=74, RPAREN=75, LPAREN=76, 
		RBRACK=77, LBRACK=78, WS=79, SELECT=80, FROM=81, WHERE=82, TRUE_SYM=83, 
		FALSE_SYM=84, INTEGER_NUM=85, HEX_DIGIT=86, BIT_NUM=87, REAL_NUMBER=88, 
		TEXT_STRING=89, ID=90;
	public static readonly string[] tokenNames = {
		"<INVALID>", "EQ", "NOT_EQ", "'>'", "'>='", "'<'", "'<='", "LTH_IN", "LTH_IG", 
		"LTH_PC", "LTH_ME", "LET_IN", "LET_IG", "LET_PC", "LET_ME", "GTH_IN", 
		"GTH_IG", "GTH_PC", "GTH_ME", "GET_IN", "GET_IG", "GET_PC", "GET_ME", 
		"OR_SYM", "AND_SYM", "NOT_SYM", "EQUAL_IN", "EQUAL_IG", "EQUAL_PC", "EQUAL_ME", 
		"UNEQUAL_IN", "UNEQUAL_IG", "UNEQUAL_PC", "UNEQUAL_ME", "CONJ_IN", "CONJ_IG", 
		"CONJ_PC", "CONJ_ME", "DISJ_IN", "DISJ_IG", "DISJ_PC", "DISJ_ME", "DIFF_IN", 
		"DIFF_IG", "DIFF_PC", "DIFF_ME", "JOIN_IN", "JOIN_IG", "JOIN_PC", "JOIN_ME", 
		"UNION_IN", "UNION_IG", "UNION_PC", "UNION_ME", "INTERSECT_IN", "INTERSECT_IG", 
		"INTERSECT_PC", "INTERSECT_ME", "MINUS_IN", "MINUS_IG", "MINUS_PC", "MINUS_ME", 
		"IN_IN", "IN_IG", "IN_PC", "IN_ME", "NOT_IN_IN", "NOT_IN_IG", "NOT_IN_PC", 
		"NOT_IN_ME", "'+'", "'-'", "'.'", "','", "'*'", "')'", "'('", "']'", "'['", 
		"WS", "SELECT", "FROM", "WHERE", "TRUE_SYM", "FALSE_SYM", "INTEGER_NUM", 
		"HEX_DIGIT", "BIT_NUM", "REAL_NUMBER", "TEXT_STRING", "ID"
	};
	public const int
		RULE_init = 0, RULE_compare_value_operator = 1, RULE_compare_attribute_operator = 2, 
		RULE_expression_connector = 3, RULE_condition_connector = 4, RULE_join_operator = 5, 
		RULE_relation_connector = 6, RULE_subquery_operator = 7, RULE_string_literal = 8, 
		RULE_number_literal = 9, RULE_hex_literal = 10, RULE_boolean_literal = 11, 
		RULE_bit_literal = 12, RULE_literal_value = 13, RULE_scheme_name = 14, 
		RULE_attribute_name = 15, RULE_relation_name = 16, RULE_select_statement = 17, 
		RULE_select_expression = 18, RULE_attribute_list = 19, RULE_attribute = 20, 
		RULE_where_clause = 21, RULE_selection_condition = 22, RULE_selection_condition_atom = 23, 
		RULE_subquery = 24, RULE_probabilistic_interval = 25, RULE_expression = 26, 
		RULE_expression_atom = 27, RULE_join_relation_list = 28;
	public static readonly string[] ruleNames = {
		"init", "compare_value_operator", "compare_attribute_operator", "expression_connector", 
		"condition_connector", "join_operator", "relation_connector", "subquery_operator", 
		"string_literal", "number_literal", "hex_literal", "boolean_literal", 
		"bit_literal", "literal_value", "scheme_name", "attribute_name", "relation_name", 
		"select_statement", "select_expression", "attribute_list", "attribute", 
		"where_clause", "selection_condition", "selection_condition_atom", "subquery", 
		"probabilistic_interval", "expression", "expression_atom", "join_relation_list"
	};

	public override string GrammarFileName { get { return "ProbSQL.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ProbSQLParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class InitContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compare_value_operatorContext : ParserRuleContext {
		public ITerminalNode GTH() { return GetToken(ProbSQLParser.GTH, 0); }
		public ITerminalNode LTH() { return GetToken(ProbSQLParser.LTH, 0); }
		public ITerminalNode NOT_EQ() { return GetToken(ProbSQLParser.NOT_EQ, 0); }
		public ITerminalNode EQ() { return GetToken(ProbSQLParser.EQ, 0); }
		public ITerminalNode LET() { return GetToken(ProbSQLParser.LET, 0); }
		public ITerminalNode GET() { return GetToken(ProbSQLParser.GET, 0); }
		public Compare_value_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_compare_value_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterCompare_value_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitCompare_value_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare_value_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compare_value_operatorContext compare_value_operator() {
		Compare_value_operatorContext _localctx = new Compare_value_operatorContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_compare_value_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NOT_EQ) | (1L << GTH) | (1L << GET) | (1L << LTH) | (1L << LET))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compare_attribute_operatorContext : ParserRuleContext {
		public ITerminalNode UNEQUAL_IN() { return GetToken(ProbSQLParser.UNEQUAL_IN, 0); }
		public ITerminalNode LTH_IN() { return GetToken(ProbSQLParser.LTH_IN, 0); }
		public ITerminalNode GTH_PC() { return GetToken(ProbSQLParser.GTH_PC, 0); }
		public ITerminalNode UNEQUAL_ME() { return GetToken(ProbSQLParser.UNEQUAL_ME, 0); }
		public ITerminalNode LTH_PC() { return GetToken(ProbSQLParser.LTH_PC, 0); }
		public ITerminalNode GET_PC() { return GetToken(ProbSQLParser.GET_PC, 0); }
		public ITerminalNode GET_ME() { return GetToken(ProbSQLParser.GET_ME, 0); }
		public ITerminalNode EQUAL_IN() { return GetToken(ProbSQLParser.EQUAL_IN, 0); }
		public ITerminalNode LTH_ME() { return GetToken(ProbSQLParser.LTH_ME, 0); }
		public ITerminalNode GET_IG() { return GetToken(ProbSQLParser.GET_IG, 0); }
		public ITerminalNode EQUAL_PC() { return GetToken(ProbSQLParser.EQUAL_PC, 0); }
		public ITerminalNode LET_ME() { return GetToken(ProbSQLParser.LET_ME, 0); }
		public ITerminalNode EQUAL_ME() { return GetToken(ProbSQLParser.EQUAL_ME, 0); }
		public ITerminalNode LET_IG() { return GetToken(ProbSQLParser.LET_IG, 0); }
		public ITerminalNode GTH_IN() { return GetToken(ProbSQLParser.GTH_IN, 0); }
		public ITerminalNode UNEQUAL_PC() { return GetToken(ProbSQLParser.UNEQUAL_PC, 0); }
		public ITerminalNode EQUAL_IG() { return GetToken(ProbSQLParser.EQUAL_IG, 0); }
		public ITerminalNode LET_IN() { return GetToken(ProbSQLParser.LET_IN, 0); }
		public ITerminalNode LTH_IG() { return GetToken(ProbSQLParser.LTH_IG, 0); }
		public ITerminalNode GTH_ME() { return GetToken(ProbSQLParser.GTH_ME, 0); }
		public ITerminalNode UNEQUAL_IG() { return GetToken(ProbSQLParser.UNEQUAL_IG, 0); }
		public ITerminalNode GTH_IG() { return GetToken(ProbSQLParser.GTH_IG, 0); }
		public ITerminalNode GET_IN() { return GetToken(ProbSQLParser.GET_IN, 0); }
		public ITerminalNode LET_PC() { return GetToken(ProbSQLParser.LET_PC, 0); }
		public Compare_attribute_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_compare_attribute_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterCompare_attribute_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitCompare_attribute_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare_attribute_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compare_attribute_operatorContext compare_attribute_operator() {
		Compare_attribute_operatorContext _localctx = new Compare_attribute_operatorContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_compare_attribute_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTH_IN) | (1L << LTH_IG) | (1L << LTH_PC) | (1L << LTH_ME) | (1L << LET_IN) | (1L << LET_IG) | (1L << LET_PC) | (1L << LET_ME) | (1L << GTH_IN) | (1L << GTH_IG) | (1L << GTH_PC) | (1L << GTH_ME) | (1L << GET_IN) | (1L << GET_IG) | (1L << GET_PC) | (1L << GET_ME) | (1L << EQUAL_IN) | (1L << EQUAL_IG) | (1L << EQUAL_PC) | (1L << EQUAL_ME) | (1L << UNEQUAL_IN) | (1L << UNEQUAL_IG) | (1L << UNEQUAL_PC) | (1L << UNEQUAL_ME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_connectorContext : ParserRuleContext {
		public ITerminalNode DISJ_IN() { return GetToken(ProbSQLParser.DISJ_IN, 0); }
		public ITerminalNode DIFF_ME() { return GetToken(ProbSQLParser.DIFF_ME, 0); }
		public ITerminalNode DIFF_IN() { return GetToken(ProbSQLParser.DIFF_IN, 0); }
		public ITerminalNode CONJ_IG() { return GetToken(ProbSQLParser.CONJ_IG, 0); }
		public ITerminalNode CONJ_PC() { return GetToken(ProbSQLParser.CONJ_PC, 0); }
		public ITerminalNode DISJ_IG() { return GetToken(ProbSQLParser.DISJ_IG, 0); }
		public ITerminalNode DIFF_IG() { return GetToken(ProbSQLParser.DIFF_IG, 0); }
		public ITerminalNode CONJ_IN() { return GetToken(ProbSQLParser.CONJ_IN, 0); }
		public ITerminalNode DISJ_ME() { return GetToken(ProbSQLParser.DISJ_ME, 0); }
		public ITerminalNode CONJ_ME() { return GetToken(ProbSQLParser.CONJ_ME, 0); }
		public ITerminalNode DISJ_PC() { return GetToken(ProbSQLParser.DISJ_PC, 0); }
		public ITerminalNode DIFF_PC() { return GetToken(ProbSQLParser.DIFF_PC, 0); }
		public Expression_connectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression_connector; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterExpression_connector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitExpression_connector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_connector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_connectorContext expression_connector() {
		Expression_connectorContext _localctx = new Expression_connectorContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_expression_connector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONJ_IN) | (1L << CONJ_IG) | (1L << CONJ_PC) | (1L << CONJ_ME) | (1L << DISJ_IN) | (1L << DISJ_IG) | (1L << DISJ_PC) | (1L << DISJ_ME) | (1L << DIFF_IN) | (1L << DIFF_IG) | (1L << DIFF_PC) | (1L << DIFF_ME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_connectorContext : ParserRuleContext {
		public ITerminalNode AND_SYM() { return GetToken(ProbSQLParser.AND_SYM, 0); }
		public ITerminalNode OR_SYM() { return GetToken(ProbSQLParser.OR_SYM, 0); }
		public Condition_connectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_condition_connector; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterCondition_connector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitCondition_connector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_connector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_connectorContext condition_connector() {
		Condition_connectorContext _localctx = new Condition_connectorContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_condition_connector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_la = _input.La(1);
			if ( !(_la==OR_SYM || _la==AND_SYM) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		public ITerminalNode JOIN_IN() { return GetToken(ProbSQLParser.JOIN_IN, 0); }
		public ITerminalNode JOIN_IG() { return GetToken(ProbSQLParser.JOIN_IG, 0); }
		public ITerminalNode JOIN_PC() { return GetToken(ProbSQLParser.JOIN_PC, 0); }
		public ITerminalNode JOIN_ME() { return GetToken(ProbSQLParser.JOIN_ME, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_join_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterJoin_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitJoin_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_join_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << JOIN_IN) | (1L << JOIN_IG) | (1L << JOIN_PC) | (1L << JOIN_ME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_connectorContext : ParserRuleContext {
		public ITerminalNode MINUS_ME() { return GetToken(ProbSQLParser.MINUS_ME, 0); }
		public ITerminalNode UNION_ME() { return GetToken(ProbSQLParser.UNION_ME, 0); }
		public ITerminalNode MINUS_IN() { return GetToken(ProbSQLParser.MINUS_IN, 0); }
		public ITerminalNode UNION_IN() { return GetToken(ProbSQLParser.UNION_IN, 0); }
		public ITerminalNode UNION_PC() { return GetToken(ProbSQLParser.UNION_PC, 0); }
		public ITerminalNode INTERSECT_IG() { return GetToken(ProbSQLParser.INTERSECT_IG, 0); }
		public ITerminalNode INTERSECT_IN() { return GetToken(ProbSQLParser.INTERSECT_IN, 0); }
		public ITerminalNode INTERSECT_PC() { return GetToken(ProbSQLParser.INTERSECT_PC, 0); }
		public ITerminalNode UNION_IG() { return GetToken(ProbSQLParser.UNION_IG, 0); }
		public ITerminalNode INTERSECT_ME() { return GetToken(ProbSQLParser.INTERSECT_ME, 0); }
		public ITerminalNode MINUS_IG() { return GetToken(ProbSQLParser.MINUS_IG, 0); }
		public ITerminalNode MINUS_PC() { return GetToken(ProbSQLParser.MINUS_PC, 0); }
		public Relation_connectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_relation_connector; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterRelation_connector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitRelation_connector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation_connector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relation_connectorContext relation_connector() {
		Relation_connectorContext _localctx = new Relation_connectorContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_relation_connector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UNION_IN) | (1L << UNION_IG) | (1L << UNION_PC) | (1L << UNION_ME) | (1L << INTERSECT_IN) | (1L << INTERSECT_IG) | (1L << INTERSECT_PC) | (1L << INTERSECT_ME) | (1L << MINUS_IN) | (1L << MINUS_IG) | (1L << MINUS_PC) | (1L << MINUS_ME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_operatorContext : ParserRuleContext {
		public ITerminalNode NOT_IN_ME() { return GetToken(ProbSQLParser.NOT_IN_ME, 0); }
		public ITerminalNode NOT_IN_IN() { return GetToken(ProbSQLParser.NOT_IN_IN, 0); }
		public ITerminalNode IN_IN() { return GetToken(ProbSQLParser.IN_IN, 0); }
		public ITerminalNode NOT_IN_IG() { return GetToken(ProbSQLParser.NOT_IN_IG, 0); }
		public ITerminalNode IN_IG() { return GetToken(ProbSQLParser.IN_IG, 0); }
		public ITerminalNode IN_PC() { return GetToken(ProbSQLParser.IN_PC, 0); }
		public ITerminalNode IN_ME() { return GetToken(ProbSQLParser.IN_ME, 0); }
		public ITerminalNode NOT_IN_PC() { return GetToken(ProbSQLParser.NOT_IN_PC, 0); }
		public Subquery_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_subquery_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterSubquery_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitSubquery_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_operatorContext subquery_operator() {
		Subquery_operatorContext _localctx = new Subquery_operatorContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_subquery_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			_la = _input.La(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (IN_IN - 62)) | (1L << (IN_IG - 62)) | (1L << (IN_PC - 62)) | (1L << (IN_ME - 62)) | (1L << (NOT_IN_IN - 62)) | (1L << (NOT_IN_IG - 62)) | (1L << (NOT_IN_PC - 62)) | (1L << (NOT_IN_ME - 62)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		public ITerminalNode TEXT_STRING() { return GetToken(ProbSQLParser.TEXT_STRING, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_string_literal; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_string_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(TEXT_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_literalContext : ParserRuleContext {
		public ITerminalNode REAL_NUMBER() { return GetToken(ProbSQLParser.REAL_NUMBER, 0); }
		public ITerminalNode INTEGER_NUM() { return GetToken(ProbSQLParser.INTEGER_NUM, 0); }
		public ITerminalNode PLUS() { return GetToken(ProbSQLParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(ProbSQLParser.MINUS, 0); }
		public Number_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_number_literal; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterNumber_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitNumber_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_literalContext number_literal() {
		Number_literalContext _localctx = new Number_literalContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_number_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 76;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 79;
			_la = _input.La(1);
			if ( !(_la==INTEGER_NUM || _la==REAL_NUMBER) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hex_literalContext : ParserRuleContext {
		public ITerminalNode HEX_DIGIT() { return GetToken(ProbSQLParser.HEX_DIGIT, 0); }
		public Hex_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_hex_literal; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterHex_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitHex_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHex_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hex_literalContext hex_literal() {
		Hex_literalContext _localctx = new Hex_literalContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_hex_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(HEX_DIGIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public ITerminalNode FALSE_SYM() { return GetToken(ProbSQLParser.FALSE_SYM, 0); }
		public ITerminalNode TRUE_SYM() { return GetToken(ProbSQLParser.TRUE_SYM, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_boolean_literal; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_la = _input.La(1);
			if ( !(_la==TRUE_SYM || _la==FALSE_SYM) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_literalContext : ParserRuleContext {
		public ITerminalNode BIT_NUM() { return GetToken(ProbSQLParser.BIT_NUM, 0); }
		public Bit_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_bit_literal; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterBit_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitBit_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBit_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bit_literalContext bit_literal() {
		Bit_literalContext _localctx = new Bit_literalContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_bit_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(BIT_NUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		public Number_literalContext number_literal() {
			return GetRuleContext<Number_literalContext>(0);
		}
		public Bit_literalContext bit_literal() {
			return GetRuleContext<Bit_literalContext>(0);
		}
		public Hex_literalContext hex_literal() {
			return GetRuleContext<Hex_literalContext>(0);
		}
		public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literal_value; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_literal_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			switch (_input.La(1)) {
			case TEXT_STRING:
				{
				State = 87; string_literal();
				}
				break;
			case PLUS:
			case MINUS:
			case INTEGER_NUM:
			case REAL_NUMBER:
				{
				State = 88; number_literal();
				}
				break;
			case HEX_DIGIT:
				{
				State = 89; hex_literal();
				}
				break;
			case TRUE_SYM:
			case FALSE_SYM:
				{
				State = 90; boolean_literal();
				}
				break;
			case BIT_NUM:
				{
				State = 91; bit_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scheme_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ProbSQLParser.ID, 0); }
		public Scheme_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_scheme_name; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterScheme_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitScheme_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScheme_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scheme_nameContext scheme_name() {
		Scheme_nameContext _localctx = new Scheme_nameContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_scheme_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ProbSQLParser.ID, 0); }
		public Attribute_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attribute_name; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterAttribute_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitAttribute_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_nameContext attribute_name() {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_attribute_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ProbSQLParser.ID, 0); }
		public Relation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_relation_name; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterRelation_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitRelation_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relation_nameContext relation_name() {
		Relation_nameContext _localctx = new Relation_nameContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_relation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public Relation_connectorContext[] relation_connector() {
			return GetRuleContexts<Relation_connectorContext>();
		}
		public Select_expressionContext select_expression(int i) {
			return GetRuleContext<Select_expressionContext>(i);
		}
		public Select_expressionContext[] select_expression() {
			return GetRuleContexts<Select_expressionContext>();
		}
		public Relation_connectorContext relation_connector(int i) {
			return GetRuleContext<Relation_connectorContext>(i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_select_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; select_expression();
			State = 106;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UNION_IN) | (1L << UNION_IG) | (1L << UNION_PC) | (1L << UNION_ME) | (1L << INTERSECT_IN) | (1L << INTERSECT_IG) | (1L << INTERSECT_PC) | (1L << INTERSECT_ME) | (1L << MINUS_IN) | (1L << MINUS_IG) | (1L << MINUS_PC) | (1L << MINUS_ME))) != 0)) {
				{
				{
				State = 101; relation_connector();
				State = 102; select_expression();
				}
				}
				State = 108;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_expressionContext : ParserRuleContext {
		public Join_relation_listContext join_relation_list() {
			return GetRuleContext<Join_relation_listContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(ProbSQLParser.LPAREN, 0); }
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(ProbSQLParser.FROM, 0); }
		public ITerminalNode RPAREN() { return GetToken(ProbSQLParser.RPAREN, 0); }
		public ITerminalNode SELECT() { return GetToken(ProbSQLParser.SELECT, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Select_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_select_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterSelect_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitSelect_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_expressionContext select_expression() {
		Select_expressionContext _localctx = new Select_expressionContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_select_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 109; Match(LPAREN);
				}
			}

			State = 112; Match(SELECT);
			State = 113; attribute_list();
			State = 114; Match(FROM);
			State = 115; join_relation_list();
			State = 117;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 116; where_clause();
				}
			}

			State = 120;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 119; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public ITerminalNode DOT() { return GetToken(ProbSQLParser.DOT, 0); }
		public Scheme_nameContext scheme_name() {
			return GetRuleContext<Scheme_nameContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ProbSQLParser.COMMA); }
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode COMMA(int i) {
			return GetToken(ProbSQLParser.COMMA, i);
		}
		public ITerminalNode ASTERISK() { return GetToken(ProbSQLParser.ASTERISK, 0); }
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attribute_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterAttribute_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitAttribute_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_attribute_list);
		int _la;
		try {
			State = 135;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122; attribute();
				State = 127;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 123; Match(COMMA);
					State = 124; attribute();
					}
					}
					State = 129;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130; scheme_name();
				State = 131; Match(DOT);
				State = 132; Match(ASTERISK);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134; Match(ASTERISK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(ProbSQLParser.DOT, 0); }
		public Scheme_nameContext scheme_name() {
			return GetRuleContext<Scheme_nameContext>(0);
		}
		public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attribute; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_attribute);
		try {
			State = 142;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 137; attribute_name();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 138; scheme_name();
				State = 139; Match(DOT);
				State = 140; attribute_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public Selection_conditionContext selection_condition() {
			return GetRuleContext<Selection_conditionContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(ProbSQLParser.WHERE, 0); }
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_where_clause; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(WHERE);
			State = 145; selection_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_conditionContext : ParserRuleContext {
		public Condition_connectorContext condition_connector(int i) {
			return GetRuleContext<Condition_connectorContext>(i);
		}
		public Selection_condition_atomContext[] selection_condition_atom() {
			return GetRuleContexts<Selection_condition_atomContext>();
		}
		public Selection_condition_atomContext selection_condition_atom(int i) {
			return GetRuleContext<Selection_condition_atomContext>(i);
		}
		public Condition_connectorContext[] condition_connector() {
			return GetRuleContexts<Condition_connectorContext>();
		}
		public Selection_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_selection_condition; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterSelection_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitSelection_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_conditionContext selection_condition() {
		Selection_conditionContext _localctx = new Selection_conditionContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_selection_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; selection_condition_atom();
			State = 153;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OR_SYM || _la==AND_SYM) {
				{
				{
				State = 148; condition_connector();
				State = 149; selection_condition_atom();
				}
				}
				State = 155;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_condition_atomContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public ITerminalNode NOT_SYM() { return GetToken(ProbSQLParser.NOT_SYM, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(ProbSQLParser.LPAREN, 0); }
		public Probabilistic_intervalContext probabilistic_interval() {
			return GetRuleContext<Probabilistic_intervalContext>(0);
		}
		public Subquery_operatorContext subquery_operator() {
			return GetRuleContext<Subquery_operatorContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(ProbSQLParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(ProbSQLParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Selection_condition_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_selection_condition_atom; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterSelection_condition_atom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitSelection_condition_atom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection_condition_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_condition_atomContext selection_condition_atom() {
		Selection_condition_atomContext _localctx = new Selection_condition_atomContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_selection_condition_atom);
		int _la;
		try {
			State = 172;
			switch (_input.La(1)) {
			case NOT_SYM:
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				_la = _input.La(1);
				if (_la==NOT_SYM) {
					{
					State = 156; Match(NOT_SYM);
					}
				}

				State = 159; Match(LPAREN);
				State = 160; expression();
				State = 161; Match(RPAREN);
				State = 162; probabilistic_interval();
				}
				break;
			case IN_IN:
			case IN_IG:
			case IN_PC:
			case IN_ME:
			case NOT_IN_IN:
			case NOT_IN_IG:
			case NOT_IN_PC:
			case NOT_IN_ME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; subquery_operator();
				State = 165; Match(LPAREN);
				State = 166; attribute();
				State = 167; Match(COMMA);
				State = 168; subquery();
				State = 169; Match(RPAREN);
				State = 170; probabilistic_interval();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_subquery; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Probabilistic_intervalContext : ParserRuleContext {
		public ITerminalNode[] REAL_NUMBER() { return GetTokens(ProbSQLParser.REAL_NUMBER); }
		public ITerminalNode COMMA() { return GetToken(ProbSQLParser.COMMA, 0); }
		public ITerminalNode REAL_NUMBER(int i) {
			return GetToken(ProbSQLParser.REAL_NUMBER, i);
		}
		public ITerminalNode RBRACK() { return GetToken(ProbSQLParser.RBRACK, 0); }
		public ITerminalNode LBRACK() { return GetToken(ProbSQLParser.LBRACK, 0); }
		public Probabilistic_intervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_probabilistic_interval; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterProbabilistic_interval(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitProbabilistic_interval(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProbabilistic_interval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Probabilistic_intervalContext probabilistic_interval() {
		Probabilistic_intervalContext _localctx = new Probabilistic_intervalContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_probabilistic_interval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; Match(LBRACK);
			State = 177; Match(REAL_NUMBER);
			State = 178; Match(COMMA);
			State = 179; Match(REAL_NUMBER);
			State = 180; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Expression_connectorContext expression_connector(int i) {
			return GetRuleContext<Expression_connectorContext>(i);
		}
		public Expression_atomContext[] expression_atom() {
			return GetRuleContexts<Expression_atomContext>();
		}
		public Expression_atomContext expression_atom(int i) {
			return GetRuleContext<Expression_atomContext>(i);
		}
		public Expression_connectorContext[] expression_connector() {
			return GetRuleContexts<Expression_connectorContext>();
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; expression_atom();
			State = 188;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONJ_IN) | (1L << CONJ_IG) | (1L << CONJ_PC) | (1L << CONJ_ME) | (1L << DISJ_IN) | (1L << DISJ_IG) | (1L << DISJ_PC) | (1L << DISJ_ME) | (1L << DIFF_IN) | (1L << DIFF_IG) | (1L << DIFF_PC) | (1L << DIFF_ME))) != 0)) {
				{
				{
				State = 183; expression_connector();
				State = 184; expression_atom();
				}
				}
				State = 190;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_atomContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Compare_attribute_operatorContext compare_attribute_operator() {
			return GetRuleContext<Compare_attribute_operatorContext>(0);
		}
		public Compare_value_operatorContext compare_value_operator() {
			return GetRuleContext<Compare_value_operatorContext>(0);
		}
		public Expression_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression_atom; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterExpression_atom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitExpression_atom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_atomContext expression_atom() {
		Expression_atomContext _localctx = new Expression_atomContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_expression_atom);
		try {
			State = 203;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191; attribute();
				State = 192; compare_value_operator();
				State = 193; literal_value();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195; literal_value();
				State = 196; compare_value_operator();
				State = 197; attribute();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 199; attribute();
				State = 200; compare_attribute_operator();
				State = 201; attribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_relation_listContext : ParserRuleContext {
		public Join_operatorContext[] join_operator() {
			return GetRuleContexts<Join_operatorContext>();
		}
		public Join_operatorContext join_operator(int i) {
			return GetRuleContext<Join_operatorContext>(i);
		}
		public Relation_nameContext relation_name(int i) {
			return GetRuleContext<Relation_nameContext>(i);
		}
		public Relation_nameContext[] relation_name() {
			return GetRuleContexts<Relation_nameContext>();
		}
		public Join_relation_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_join_relation_list; }
		public override void EnterRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.EnterJoin_relation_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProbSQLListener typedListener = listener as IProbSQLListener;
			if (typedListener != null) typedListener.ExitJoin_relation_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProbSQLVisitor<TResult> typedVisitor = visitor as IProbSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_relation_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_relation_listContext join_relation_list() {
		Join_relation_listContext _localctx = new Join_relation_listContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_join_relation_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; relation_name();
			State = 211;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << JOIN_IN) | (1L << JOIN_IG) | (1L << JOIN_PC) | (1L << JOIN_ME))) != 0)) {
				{
				{
				State = 206; join_operator();
				State = 207; relation_name();
				}
				}
				State = 213;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\\\xD9\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3"+
		"\n\x3\n\x3\v\x5\vP\n\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF_\n\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12"+
		"\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\a\x13k\n\x13\f\x13\xE\x13n\v\x13\x3"+
		"\x14\x5\x14q\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14x\n\x14\x3"+
		"\x14\x5\x14{\n\x14\x3\x15\x3\x15\x3\x15\a\x15\x80\n\x15\f\x15\xE\x15\x83"+
		"\v\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x8A\n\x15\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x5\x16\x91\n\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\a\x18\x9A\n\x18\f\x18\xE\x18\x9D\v\x18\x3\x19\x5\x19"+
		"\xA0\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\xAF\n\x19\x3\x1A\x3\x1A\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C"+
		"\xBD\n\x1C\f\x1C\xE\x1C\xC0\v\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\xCE\n\x1D\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\a\x1E\xD4\n\x1E\f\x1E\xE\x1E\xD7\v\x1E\x3\x1E\x2"+
		"\x2\x2\x1F\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30"+
		"\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2\x2\f\x3\x2\x3\b\x4\x2\t\x18\x1C#\x3"+
		"\x2$/\x3\x2\x19\x1A\x3\x2\x30\x33\x3\x2\x34?\x3\x2@G\x3\x2HI\x4\x2WWZ"+
		"Z\x3\x2UV\xCF\x2<\x3\x2\x2\x2\x4>\x3\x2\x2\x2\x6@\x3\x2\x2\x2\b\x42\x3"+
		"\x2\x2\x2\n\x44\x3\x2\x2\x2\f\x46\x3\x2\x2\x2\xEH\x3\x2\x2\x2\x10J\x3"+
		"\x2\x2\x2\x12L\x3\x2\x2\x2\x14O\x3\x2\x2\x2\x16S\x3\x2\x2\x2\x18U\x3\x2"+
		"\x2\x2\x1AW\x3\x2\x2\x2\x1C^\x3\x2\x2\x2\x1E`\x3\x2\x2\x2 \x62\x3\x2\x2"+
		"\x2\"\x64\x3\x2\x2\x2$\x66\x3\x2\x2\x2&p\x3\x2\x2\x2(\x89\x3\x2\x2\x2"+
		"*\x90\x3\x2\x2\x2,\x92\x3\x2\x2\x2.\x95\x3\x2\x2\x2\x30\xAE\x3\x2\x2\x2"+
		"\x32\xB0\x3\x2\x2\x2\x34\xB2\x3\x2\x2\x2\x36\xB8\x3\x2\x2\x2\x38\xCD\x3"+
		"\x2\x2\x2:\xCF\x3\x2\x2\x2<=\x5$\x13\x2=\x3\x3\x2\x2\x2>?\t\x2\x2\x2?"+
		"\x5\x3\x2\x2\x2@\x41\t\x3\x2\x2\x41\a\x3\x2\x2\x2\x42\x43\t\x4\x2\x2\x43"+
		"\t\x3\x2\x2\x2\x44\x45\t\x5\x2\x2\x45\v\x3\x2\x2\x2\x46G\t\x6\x2\x2G\r"+
		"\x3\x2\x2\x2HI\t\a\x2\x2I\xF\x3\x2\x2\x2JK\t\b\x2\x2K\x11\x3\x2\x2\x2"+
		"LM\a[\x2\x2M\x13\x3\x2\x2\x2NP\t\t\x2\x2ON\x3\x2\x2\x2OP\x3\x2\x2\x2P"+
		"Q\x3\x2\x2\x2QR\t\n\x2\x2R\x15\x3\x2\x2\x2ST\aX\x2\x2T\x17\x3\x2\x2\x2"+
		"UV\t\v\x2\x2V\x19\x3\x2\x2\x2WX\aY\x2\x2X\x1B\x3\x2\x2\x2Y_\x5\x12\n\x2"+
		"Z_\x5\x14\v\x2[_\x5\x16\f\x2\\_\x5\x18\r\x2]_\x5\x1A\xE\x2^Y\x3\x2\x2"+
		"\x2^Z\x3\x2\x2\x2^[\x3\x2\x2\x2^\\\x3\x2\x2\x2^]\x3\x2\x2\x2_\x1D\x3\x2"+
		"\x2\x2`\x61\a\\\x2\x2\x61\x1F\x3\x2\x2\x2\x62\x63\a\\\x2\x2\x63!\x3\x2"+
		"\x2\x2\x64\x65\a\\\x2\x2\x65#\x3\x2\x2\x2\x66l\x5&\x14\x2gh\x5\xE\b\x2"+
		"hi\x5&\x14\x2ik\x3\x2\x2\x2jg\x3\x2\x2\x2kn\x3\x2\x2\x2lj\x3\x2\x2\x2"+
		"lm\x3\x2\x2\x2m%\x3\x2\x2\x2nl\x3\x2\x2\x2oq\aN\x2\x2po\x3\x2\x2\x2pq"+
		"\x3\x2\x2\x2qr\x3\x2\x2\x2rs\aR\x2\x2st\x5(\x15\x2tu\aS\x2\x2uw\x5:\x1E"+
		"\x2vx\x5,\x17\x2wv\x3\x2\x2\x2wx\x3\x2\x2\x2xz\x3\x2\x2\x2y{\aM\x2\x2"+
		"zy\x3\x2\x2\x2z{\x3\x2\x2\x2{\'\x3\x2\x2\x2|\x81\x5*\x16\x2}~\aK\x2\x2"+
		"~\x80\x5*\x16\x2\x7F}\x3\x2\x2\x2\x80\x83\x3\x2\x2\x2\x81\x7F\x3\x2\x2"+
		"\x2\x81\x82\x3\x2\x2\x2\x82\x8A\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x84\x85"+
		"\x5\x1E\x10\x2\x85\x86\aJ\x2\x2\x86\x87\aL\x2\x2\x87\x8A\x3\x2\x2\x2\x88"+
		"\x8A\aL\x2\x2\x89|\x3\x2\x2\x2\x89\x84\x3\x2\x2\x2\x89\x88\x3\x2\x2\x2"+
		"\x8A)\x3\x2\x2\x2\x8B\x91\x5 \x11\x2\x8C\x8D\x5\x1E\x10\x2\x8D\x8E\aJ"+
		"\x2\x2\x8E\x8F\x5 \x11\x2\x8F\x91\x3\x2\x2\x2\x90\x8B\x3\x2\x2\x2\x90"+
		"\x8C\x3\x2\x2\x2\x91+\x3\x2\x2\x2\x92\x93\aT\x2\x2\x93\x94\x5.\x18\x2"+
		"\x94-\x3\x2\x2\x2\x95\x9B\x5\x30\x19\x2\x96\x97\x5\n\x6\x2\x97\x98\x5"+
		"\x30\x19\x2\x98\x9A\x3\x2\x2\x2\x99\x96\x3\x2\x2\x2\x9A\x9D\x3\x2\x2\x2"+
		"\x9B\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C/\x3\x2\x2\x2\x9D\x9B\x3\x2"+
		"\x2\x2\x9E\xA0\a\x1B\x2\x2\x9F\x9E\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0"+
		"\xA1\x3\x2\x2\x2\xA1\xA2\aN\x2\x2\xA2\xA3\x5\x36\x1C\x2\xA3\xA4\aM\x2"+
		"\x2\xA4\xA5\x5\x34\x1B\x2\xA5\xAF\x3\x2\x2\x2\xA6\xA7\x5\x10\t\x2\xA7"+
		"\xA8\aN\x2\x2\xA8\xA9\x5*\x16\x2\xA9\xAA\aK\x2\x2\xAA\xAB\x5\x32\x1A\x2"+
		"\xAB\xAC\aM\x2\x2\xAC\xAD\x5\x34\x1B\x2\xAD\xAF\x3\x2\x2\x2\xAE\x9F\x3"+
		"\x2\x2\x2\xAE\xA6\x3\x2\x2\x2\xAF\x31\x3\x2\x2\x2\xB0\xB1\x5$\x13\x2\xB1"+
		"\x33\x3\x2\x2\x2\xB2\xB3\aP\x2\x2\xB3\xB4\aZ\x2\x2\xB4\xB5\aK\x2\x2\xB5"+
		"\xB6\aZ\x2\x2\xB6\xB7\aO\x2\x2\xB7\x35\x3\x2\x2\x2\xB8\xBE\x5\x38\x1D"+
		"\x2\xB9\xBA\x5\b\x5\x2\xBA\xBB\x5\x38\x1D\x2\xBB\xBD\x3\x2\x2\x2\xBC\xB9"+
		"\x3\x2\x2\x2\xBD\xC0\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2"+
		"\x2\xBF\x37\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC1\xC2\x5*\x16\x2\xC2\xC3"+
		"\x5\x4\x3\x2\xC3\xC4\x5\x1C\xF\x2\xC4\xCE\x3\x2\x2\x2\xC5\xC6\x5\x1C\xF"+
		"\x2\xC6\xC7\x5\x4\x3\x2\xC7\xC8\x5*\x16\x2\xC8\xCE\x3\x2\x2\x2\xC9\xCA"+
		"\x5*\x16\x2\xCA\xCB\x5\x6\x4\x2\xCB\xCC\x5*\x16\x2\xCC\xCE\x3\x2\x2\x2"+
		"\xCD\xC1\x3\x2\x2\x2\xCD\xC5\x3\x2\x2\x2\xCD\xC9\x3\x2\x2\x2\xCE\x39\x3"+
		"\x2\x2\x2\xCF\xD5\x5\"\x12\x2\xD0\xD1\x5\f\a\x2\xD1\xD2\x5\"\x12\x2\xD2"+
		"\xD4\x3\x2\x2\x2\xD3\xD0\x3\x2\x2\x2\xD4\xD7\x3\x2\x2\x2\xD5\xD3\x3\x2"+
		"\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6;\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\x11O^"+
		"lpwz\x81\x89\x90\x9B\x9F\xAE\xBE\xCD\xD5";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PRDB_Visual_Management.ProbSQLCompiler
